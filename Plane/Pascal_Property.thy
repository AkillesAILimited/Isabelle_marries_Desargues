theory Pascal_Property
  imports Main Projective_Plane_Axioms Pappus_Property
begin

(* Contents:
- A hexagon is pascal if its three opposite sides meet in collinear points [is_pascal].
- A plane is pascal, or has Pascal property, if for every hexagon of that plane
Pascal property is stable under any permutation of that hexagon. 
*)

definition inters :: "Lines \<Rightarrow> Lines \<Rightarrow> Points set" where
"inters l m \<equiv> {P. incid P l \<and> incid P m}"

lemma inters_is_singleton:
  assumes "l \<noteq> m" and "P \<in> inters l m" and "Q \<in> inters l m"
  shows "P = Q"
  using assms(1) assms(2) assms(3) ax_uniqueness inters_def by blast

definition inter :: "Lines \<Rightarrow> Lines \<Rightarrow> Points" where
"inter l m \<equiv> @P. P \<in> inters l m"

lemma uniq_inter:
  assumes "l \<noteq> m" and "incid P l" and "incid P m"
  shows "inter l m = P"
proof -
  have "P \<in> inters l m"
    by (simp add: assms(2) assms(3) inters_def)
  have "\<forall>Q. Q \<in> inters l m \<longrightarrow> Q = P"
    using \<open>P \<in> inters l m\<close> assms(1) inters_is_singleton by blast
  show "inter l m = P"
    using \<open>P \<in> inters l m\<close> assms(1) inter_def inters_is_singleton by auto
qed

(* The configuration of a hexagon where the three pairs of opposite sides meet in 
collinear points *)
definition is_pascal :: "[Points, Points, Points, Points, Points, Points] \<Rightarrow> bool" where
"is_pascal A B C D E F \<equiv> distinct6 A B C D E F \<and>
(let P = inter (line B C) (line E F) in
let Q = inter (line C D) (line A F) in
let R = inter (line A B) (line D E) in 
col P Q R)"

lemma col_rot_CW:
  assumes "col P Q R"
  shows "col R P Q"
  using assms col_def by auto

lemma col_2cycle: 
  assumes "col P Q R"
  shows "col P R Q"
  using assms col_def by auto

lemma distinct6_rot_CW:
  assumes "distinct6 A B C D E F"
  shows "distinct6 F A B C D E"
  using assms distinct6_def by auto

lemma lines_comm: "lines P Q = lines Q P"
  using lines_def by auto

lemma line_comm:
  assumes "P \<noteq> Q"
  shows "line P Q = line Q P"
  by (metis ax_uniqueness incidA_lAB incidB_lAB)
  
lemma inters_comm: "inters l m = inters m l"
  using inters_def by auto

lemma inter_comm: "inter l m = inter m l"
  by (simp add: inter_def inters_comm)

lemma inter_line_line_comm:
  assumes "C \<noteq> D"
  shows "inter (line A B) (line C D) = inter (line A B) (line D C)"
  using assms line_comm by auto

lemma inter_line_comm_line:
  assumes "A \<noteq> B"
  shows "inter (line A B) (line C D) = inter (line B A) (line C D)"
  using assms line_comm by auto

lemma inter_comm_line_line_comm:
  assumes "C \<noteq> D" and "line A B \<noteq> line C D"
  shows "inter (line A B) (line C D) = inter (line D C) (line A B)"
  by (metis inter_comm line_comm)

(* Pascal's property is stable under the 6-cycle [A B C D E F] *)
lemma is_pascal_rot_CW:
  assumes "is_pascal A B C D E F"
  shows "is_pascal F A B C D E"
proof -
  have "distinct6 F A B C D E"
    using assms distinct6_rot_CW is_pascal_def by blast
  then show "is_pascal F A B C D E"
    using assms is_pascal_def col_def inter_comm_line_line_comm col_rot_CW 
      inter_line_line_comm inter_comm line_comm distinct6_def by auto
qed

(* We recall that the group of permutations S_6 is generated by the 2-cycle [1 2]
and the 6-cycle [1 2 3 4 5 6] *)

(* Assuming Pappus property, Pascal property is stable under the 2-cycle [A B] *)

lemma incid_C_AB: 
  assumes "A \<noteq> B" and "incid A l" and "incid B l" and "incid C l"
  shows "incid C (line A B)"
  using assms(1) assms(2) assms(3) assms(4) ax_uniqueness incidA_lAB incidB_lAB by blast

lemma incid_inters_left: 
  assumes "P \<in> inters l m"
  shows "incid P l"
  using assms inters_def by auto

lemma incid_inters_right:
  assumes "P \<in> inters l m"
  shows "incid P m"
  using assms incid_inters_left inters_comm by blast

lemma inter_in_inters: "inter l m \<in> inters l m"
proof -
  have "\<exists>P. P \<in> inters l m"
    using inters_def ax2 by auto
  show "inter l m \<in> inters l m"
    by (metis \<open>\<exists>P. P \<in> inters l m\<close> inter_def some_eq_ex)
qed

lemma incid_inter_left: "incid (inter l m) l"
  using incid_inters_left inter_in_inters by blast

lemma incid_inter_right: "incid (inter l m) m"
  using incid_inter_left inter_comm by fastforce

lemma col_A_B_ABl: "col A B (inter (line A B) l)"
  using col_def incidA_lAB incidB_lAB incid_inter_left by blast

lemma col_A_B_lAB: "col A B (inter l (line A B))"
  using col_A_B_ABl inter_comm by auto

lemma inter_is_a_intersec: "is_a_intersec (inter (line A B) (line C D)) A B C D"
  by (simp add: col_A_B_ABl col_A_B_lAB col_rot_CW is_a_intersec_def)

lemma is_pascal_under_AB:
  assumes "is_pappus" and "line B C \<noteq> line E F" and "line C D \<noteq> line A F"
    and "line A B \<noteq> line D E" and "line A C \<noteq> line E F" and "line B F \<noteq> line C D" 
    and "is_pascal A B C D E F"
  shows "is_pascal B A C D E F"
proof -
  have "distinct6 B A C D E F"
    using assms(7) distinct6_def is_pascal_def by auto
  define W where "W = inter (line A C) (line E F)"
  have "col A C W"
    by (simp add: col_A_B_ABl W_def)
  define P Q R where "P = inter (line B C) (line E F)"
    and "Q = inter (line C D) (line A F)"
    and "R = inter (line A B) (line D E)"
  have "col P Q R"
    using P_def Q_def R_def assms(7) is_pascal_def by auto
      (* Below we take care of a few possible degenerate cases *)
  have "is_pascal B A C D E F" if "P = Q"
    by (smt P_def Q_def \<open>distinct6 B A C D E F\<close> assms(5) assms(6) col_A_B_ABl distinct6_def incidB_lAB incid_inter_left incid_inter_right is_pascal_def line_comm that uniq_inter)
 have "is_pascal B A C D E F" if "P = R"
   by (smt P_def R_def \<open>distinct6 B A C D E F\<close> ax_uniqueness col_ABA col_def distinct6_def incidA_lAB incidB_lAB incid_inter_right inter_comm is_pascal_def that)
  have "is_pascal B A C D E F" if "P = A"
    by (smt P_def Q_def R_def \<open>P = Q \<Longrightarrow> is_pascal B A C D E F\<close> \<open>P = R \<Longrightarrow> is_pascal B A C D E F\<close> \<open>col P Q R\<close> \<open>distinct6 B A C D E F\<close> assms(2) ax_uniqueness col_def distinct6_def incidA_lAB incidB_lAB incid_inter_left incid_inter_right that)
  have "is_pascal B A C D E F" if "P = C"
    by (smt P_def Q_def R_def \<open>P = Q \<Longrightarrow> is_pascal B A C D E F\<close> \<open>col P Q R\<close> \<open>distinct6 B A C D E F\<close> ax_uniqueness col_def distinct6_def incidA_lAB incidB_lAB incid_inter_left incid_inter_right is_pascal_def that)    
  have "is_pascal B A C D E F" if "P = W"
    by (smt P_def Q_def R_def W_def \<open>P = C \<Longrightarrow> is_pascal B A C D E F\<close> \<open>P = R \<Longrightarrow> is_pascal B A C D E F\<close> \<open>col P Q R\<close> \<open>distinct6 B A C D E F\<close> ax_uniqueness col_def distinct6_def incidA_lAB incidB_lAB incid_inter_left incid_inter_right is_pascal_def that) 


