theory Pascal_Property
  imports Main Projective_Plane_Axioms Pappus_Property
begin

(* Contents:
- A hexagon is pascal if its three opposite sides meet in collinear points [is_pascal].
- A plane is pascal, or has Pascal property, if for every hexagon of that plane
Pascal property is stable under any permutation of that hexagon. 
*)

definition inters :: "Lines \<Rightarrow> Lines \<Rightarrow> Points set" where
"inters l m \<equiv> {P. incid P l \<and> incid P m}"

lemma uniq_inter:
  assumes "l \<noteq> m" and "P \<in> inters l m" and "Q \<in> inters l m"
  shows "P = Q"
  using assms(1) assms(2) assms(3) ax_uniqueness inters_def by blast

definition inter :: "Lines \<Rightarrow> Lines \<Rightarrow> Points" where
"inter l m \<equiv> @P. P \<in> inters l m"

(* The configuration of a hexagon where the three pairs of opposite sides meet in 
collinear points *)
definition is_pascal :: "[Points, Points, Points, Points, Points, Points] \<Rightarrow> bool" where
"is_pascal A B C D E F \<equiv> distinct6 A B C D E F \<and>
(let P = inter (line B C) (line E F) in
let Q = inter (line C D) (line A F) in
let R = inter (line A B) (line D E) in 
col P Q R)"

lemma col_rot_right:
  assumes "col P Q R"
  shows "col R P Q"
  using assms col_def by auto

lemma distinct6_rot_right:
  assumes "distinct6 A B C D E F"
  shows "distinct6 F A B C D E"
  using assms distinct6_def by auto

lemma lines_rot_right: "lines P Q = lines Q P"
  using lines_def by auto

lemma line_rot_right:
  assumes "P \<noteq> Q"
  shows "line P Q = line Q P"
  by (metis ax_uniqueness incidA_lAB incidB_lAB)
  
lemma inters_rot_right: "inters l m = inters m l"
  using inters_def by auto

lemma inter_rot_right: "inter l m = inter m l"
  by (simp add: inter_def inters_rot_right)

lemma inter_line_line_rot_right:
  assumes "C \<noteq> D"
  shows "inter (line A B) (line C D) = inter (line A B) (line D C)"
  using assms line_rot_right by auto

lemma inter_line_rot_right_line:
  assumes "A \<noteq> B"
  shows "inter (line A B) (line C D) = inter (line B A) (line C D)"
  using assms line_rot_right by auto

lemma inter_rot_right_2:
  assumes "C \<noteq> D" and "line A B \<noteq> line C D"
  shows "inter (line A B) (line C D) = inter (line D C) (line A B)"
  by (metis inter_rot_right line_rot_right)

(* Pascal's property is stable under the 6-cycle [A B C D E F] *)
lemma is_pascal_rot_right:
  assumes "is_pascal A B C D E F"
  shows "is_pascal F A B C D E"
proof -
  have "distinct6 F A B C D E"
    using assms distinct6_rot_right is_pascal_def by blast
  then show "is_pascal F A B C D E"
    using assms is_pascal_def col_def inter_rot_right_2 col_rot_right inter_line_line_rot_right 
inter_rot_right line_rot_right distinct6_def by auto
qed

(* We recall that the group of permutations S_6 is generated by the 2-cycle [1 2]
and the 6-cycle [1 2 3 4 5 6] *)

(* Pascal property is stable under the 2-cycle [A B] *)


